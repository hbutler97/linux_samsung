#ifndef __EXYNOS_DRM_GEM__
#define __EXYNOS_DRM_GEM__

//#include <linux/file.h>
#include <linux/device.h>
#include <linux/mm_types.h>
#include <linux/dma-buf.h>

#include <drm/drm_mode.h>
#include <drm/drm_gem.h>
#include <drm/drmP.h>

/*
 * exynos drm buffer structure.
 *
 * @base: a gem object.
 *	- a new handle to this gem object would be created
 *	by drm_gem_handle_create().
 * @size: size requested from user, in bytes and this size is aligned
 *	in page unit.
 * @handle: handle of the buffer allocated from ION.
 *          NULL if the bo is imported from prime fd.
 * @dmabuf: dmabuf object of the allocated buffer.
 * @attachment: attachment with the gem_priv.iommu_client to the dmabuf
 * @sgt: sg_table generated by attaching @dmabuf with gem_priv.iommu_client
 * @dma_addr: DMA address of the buffer. It is IOVA if gem_priv.iommu_client
 *            exists. It is physical address, otherwise.
 * @kaddr: kernel address of the buffer.
 * @flags: indicate memory type to allocated buffer and cache attruibute.
 *
 */
struct exynos_drm_gem_obj {
	struct drm_gem_object		base;
	unsigned long			size;
	struct ion_handle		*handle;
	struct dma_buf			*dmabuf;
	struct dma_buf_attachment	*attachment;
	struct sg_table			*sgt;
	dma_addr_t			dma_addr;
	void *				kaddr;
	unsigned int			flags;
};

#define to_exynos_gem_obj(x)	container_of(x,struct exynos_drm_gem_obj, base)

struct exynos_drm_gem_private {
	struct ion_client *ion_client;
	struct device *iommu_client;
};

int exynos_drm_gem_init(struct drm_device *dev);
void exynos_drm_gem_deinit(struct drm_device *dev);
int exynos_drm_gem_init_iommu(struct drm_device *dev, struct device *client);
void exynos_drm_gem_deinit_iommu(struct drm_device *dev, struct device *client);

/* helpers for other exynos drm subsystems */
struct exynos_drm_gem_obj *
exynos_drm_gem_alloc(struct drm_device *dev, size_t size, unsigned int flags);
int exynos_drm_gem_mmap_object(struct exynos_drm_gem_obj *exynos_gem_obj,
			       struct vm_area_struct *vma);
void * exynos_drm_gem_kaddr(struct exynos_drm_gem_obj *exynos_gem_obj);

/* exynos_drm_driver_fops callbacks */
int exynos_drm_gem_mmap(struct file *filp, struct vm_area_struct *vma);

/* exynos_drm_drivers callbacks */
void exynos_drm_gem_free_object(struct drm_gem_object *obj);
struct dma_buf *exynos_dmabuf_prime_export(struct drm_device *drm_dev,
				struct drm_gem_object *obj, int flags);
struct drm_gem_object *exynos_dmabuf_prime_import(struct drm_device *drm_dev,
				struct dma_buf *dmabuf);
int exynos_drm_gem_dumb_create(struct drm_file *file_priv,
				      struct drm_device *dev,
				      struct drm_mode_create_dumb *args);
int exynos_drm_gem_dumb_map_offset(struct drm_file *file_priv,
					struct drm_device *dev, uint32_t handle,
					uint64_t *offset);

/* exynos_ioctls */
int exynos_drm_gem_create_ioctl(struct drm_device *dev, void *data,
				struct drm_file *file_priv);
int exynos_drm_gem_get_ioctl(struct drm_device *dev, void *data,
				      struct drm_file *file_priv);
int exynos_drm_gem_offset_ioctl(struct drm_device *dev, void *data,
				      struct drm_file *file_priv);
int exynos_drm_gem_mmap_ioctl(struct drm_device *dev, void *data,
				     struct drm_file *file_priv);

#endif /* __EXYNOS_DRM_GEM__ */
